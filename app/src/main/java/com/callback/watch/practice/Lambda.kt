package com.callback.watch.practice

class Lambda {

    //Lambda编程的定义，就是一小段可以作为参数传递的代码

    //Lambda表达式的语法结构:{参数名1:参数类型, 参数名2:参数类型 -> 函数体}

    //如果一个Java方法的参数列表不存在一个以上Java单抽象方法接口参数，就可以将接口名进行省略 。

    //let函数一般用在判断全局变量的时候。在对全局变量判空时，使用if并不能通过编译，
    //因为全局变量的值随时可能被其他线程修改啊，即使做了判空处理也不能确保他没有空指针风险。

    //Kotlin允许我们在字符串中嵌入${}这种语法结构的表达式，并会自动替换这部分内容。
    //另外，当表达式中仅有一个变量时，还可以省略大括号。

    //Kotlin的标准函数指的是Standard.kt文件中定义的函数

    //apply函数与上面学习的run函数也十分的类似，但差别在于apply函数无法指定返回值，只能自动返回调用对象本身。
    //传入一个lambda表达式

    //谓高阶函数，指的是如果一个函数接收另一个函数作为参数，或者返回值的类型是另一个函数，那么该函数就被称作高阶函数。

}